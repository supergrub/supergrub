# Super Grub Disk - osdetect-freebsd.cfg
# Copyright (C) 2024 Adrian Gibanel Lopez.
#
# Super Grub Disk is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Super Grub Disk is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Super Grub Disk.  If not, see <http://www.gnu.org/licenses/>.

set option_title=$"FreeBSD"

  function freebsd_ufs_variants {
    set device="$1"
    set fstype="$2"
    set uuid="$3"

    menuentry "${finaloption_tab_str}FreeBSD ($fstype $device)" $device $uuid {
      set root="$2"
      set uuid="$3"

      kfreebsd /boot/kernel/kernel
      set kFreeBSD.acpi_load=YES
      set kFreeBSD.hint.acpi.0.disabled=0
      set kFreeBSD.vfs.root.mountfrom=ufs:ufsid/$uuid
      kfreebsd_loadenv /boot/device.hints
    }

    menuentry "${finaloption_tab_str}FreeBSD ($fstype $device) (single)" $device $uuid {
      set root="$2"
      set uuid="$3"

      kfreebsd /boot/kernel/kernel -s
      set kFreeBSD.acpi_load=YES
      set kFreeBSD.hint.acpi.0.disabled=0
      set kFreeBSD.vfs.root.mountfrom=ufs:ufsid/$uuid
      kfreebsd_loadenv /boot/device.hints
    }

    menuentry "${finaloption_tab_str}FreeBSD ($fstype $device) (verbose)" $device $uuid {
      set root="$2"
      set uuid="$3"

      kfreebsd /boot/kernel/kernel -v
      set kFreeBSD.acpi_load=YES
      set kFreeBSD.hint.acpi.0.disabled=0
      set kFreeBSD.vfs.root.mountfrom=ufs:ufsid/$uuid
      kfreebsd_loadenv /boot/device.hints
    }

    menuentry "${finaloption_tab_str}FreeBSD ($fstype $device) (no ACPI)" $device $uuid {
      set root="$2"
      set uuid="$3"

      kfreebsd /boot/kernel/kernel -v
      unset kFreeBSD.acpi_load
      set kFreeBSD.hint.acpi.0.disabled=1
      set kFreeBSD.loader.acpi_disabled_by_user=1
      set kFreeBSD.vfs.root.mountfrom=ufs:ufsid/$uuid
      kfreebsd_loadenv /boot/device.hints
    }

    menuentry "${finaloption_tab_str}FreeBSD ($fstype $device) (safe mode)" $device $uuid {
      set root="$2"
      set uuid="$3"

      kfreebsd /boot/kernel/kernel -v
      unset kFreeBSD.acpi_load
      set kFreeBSD.hint.acpi.0.disabled=1
      set kFreeBSD.loader.acpi_disabled_by_user=1
      set kFreeBSD.hint.apic.0.disabled=1
      set kFreeBSD.hw.ata.ata_dma=0
      set kFreeBSD.hw.ata.atapi_dma=0
      set kFreeBSD.hw.ata.wc=0
      set kFreeBSD.hw.eisa_slots=0
      set kFreeBSD.hint.kbdmux.0.disabled=1
      set kFreeBSD.vfs.root.mountfrom=ufs:ufsid/$uuid
      kfreebsd_loadenv /boot/device.hints
    }

    menuentry "${finaloption_tab_str}FreeBSD ($fstype $device) (Default boot loader)" $device $uuid {
      set root="$2"

      kfreebsd /boot/loader
    }
  }
# 
#   function freebsd_zfs_variants {
#     set device="$1"
#     set fstype=zfs
# 
#     menuentry "${finaloption_tab_str}FreeBSD ($fstype $device)" $device {
#       set root="$2"
# 
#       kfreebsd /@/boot/kernel/kernel
#       set kFreeBSD.acpi_load=YES
#       set kFreeBSD.hint.acpi.0.disabled=0
#       kfreebsd_module_elf /@/boot/kernel/opensolaris.ko
#       kfreebsd_module_elf /@/boot/kernel/zfs.ko
#       kfreebsd_module /@/boot/zfs/zpool.cache type=/boot/zfs/zpool.cache
#       probe -l -s name $root
#       set kFreeBSD.vfs.root.mountfrom=zfs:$name
#       kfreebsd_loadenv /@/boot/device.hints
#     }
# 
#     menuentry "${finaloption_tab_str}FreeBSD ($fstype $device) (single)" $device {
#       set root="$2"
# 
#       kfreebsd /@/boot/kernel/kernel -s
#       set kFreeBSD.acpi_load=YES
#       set kFreeBSD.hint.acpi.0.disabled=0
#       kfreebsd_module_elf /@/boot/kernel/opensolaris.ko
#       kfreebsd_module_elf /@/boot/kernel/zfs.ko
#       kfreebsd_module /@/boot/zfs/zpool.cache type=/boot/zfs/zpool.cache
#       probe -l -s name $root
#       set kFreeBSD.vfs.root.mountfrom=zfs:$name
#       kfreebsd_loadenv /@/boot/device.hints
#     }
# 
#     menuentry "${finaloption_tab_str}FreeBSD ($fstype $device) (verbose)" $device {
#       set root="$2"
# 
#       kfreebsd /@/boot/kernel/kernel -v
#       set kFreeBSD.acpi_load=YES
#       set kFreeBSD.hint.acpi.0.disabled=0
#       kfreebsd_module_elf /@/boot/kernel/opensolaris.ko
#       kfreebsd_module_elf /@/boot/kernel/zfs.ko
#       kfreebsd_module /@/boot/zfs/zpool.cache type=/boot/zfs/zpool.cache
#       probe -l -s name $root
#       set kFreeBSD.vfs.root.mountfrom=zfs:$name
#       kfreebsd_loadenv /@/boot/device.hints
#     }
# 
#     menuentry "${finaloption_tab_str}FreeBSD ($fstype $device) (no ACPI)" $device {
#       set root="$2"
# 
#       kfreebsd /@/boot/kernel/kernel -v
#       unset kFreeBSD.acpi_load
#       set kFreeBSD.hint.acpi.0.disabled=1
#       set kFreeBSD.loader.acpi_disabled_by_user=1
#       kfreebsd_module_elf /@/boot/kernel/opensolaris.ko
#       kfreebsd_module_elf /@/boot/kernel/zfs.ko
#       kfreebsd_module /@/boot/zfs/zpool.cache type=/boot/zfs/zpool.cache
#       probe -l -s name $root
#       set kFreeBSD.vfs.root.mountfrom=zfs:$name
#       kfreebsd_loadenv /@/boot/device.hints
#     }
# 
#     menuentry "${finaloption_tab_str}FreeBSD ($fstype $device) (safe mode)" $device {
#       set root="$2"
# 
#       kfreebsd /@/boot/kernel/kernel -v
#       unset kFreeBSD.acpi_load
#       set kFreeBSD.hint.acpi.0.disabled=1
#       set kFreeBSD.loader.acpi_disabled_by_user=1
#       set kFreeBSD.hint.apic.0.disabled=1
#       set kFreeBSD.hw.ata.ata_dma=0
#       set kFreeBSD.hw.ata.atapi_dma=0
#       set kFreeBSD.hw.ata.wc=0
#       set kFreeBSD.hw.eisa_slots=0
#       set kFreeBSD.hint.kbdmux.0.disabled=1
#       kfreebsd_module_elf /@/boot/kernel/opensolaris.ko
#       kfreebsd_module_elf /@/boot/kernel/zfs.ko
#       kfreebsd_module /@/boot/zfs/zpool.cache type=/boot/zfs/zpool.cache
#       probe -l -s name $root
#       set kFreeBSD.vfs.root.mountfrom=zfs:$name
#       kfreebsd_loadenv /@/boot/device.hints
#     }
# 
#     menuentry "${finaloption_tab_str}FreeBSD ($fstype $device) (Default boot loader)" $device $uuid {
#       set root="$2"
# 
#       kfreebsd /@/boot/loader
#     }
# 
#   }

function run_option {

  source "${sg2d_directory}/tools.cfg"

  if [ "$1" = "osdetect" ] ; then
    run_option_osdetect_mode="TRUE"
  else
    run_option_osdetect_mode="FALSE"
  fi

  if [ "${run_option_osdetect_mode}" = "FALSE" ] ; then
    update_sg2d_devices
    devices_to_loop="${sg2d_devices}"
  else
    update_osdetect_devices
    devices_to_loop="${osdetect_devices}"
  fi

  osdetect_exclusive_devices=""
  exclusive_device_os="FALSE"

  os_found=false

  set saved_root=$root

  for dev in ${devices_to_loop}; do
    getdevice device $dev

    # $fstype: filesystem type identified
    probe -s fstype -f $dev
    # uuid: filesystem UUID
    probe -s uuid -u $dev

    if test "$fstype" = "ufs1" -o "$fstype" = "ufs2" -a \
        -e ($device)/boot/kernel/kernel -a \
        -e ($device)/boot/device.hints; then

      os_found=true

      # If this an exclusive device OS...
      # we know there is not going to be another OS in the same partition
      # so we add it to the osdetect_exclusive_devices variable
      if [ "${exclusive_device_os}" = "TRUE" ] ; then
        osdetect_exclusive_devices="${osdetect_exclusive_devices} ${dev}"
      fi

      freebsd_ufs_variants $device $fstype $uuid}

    elif test "$fstype" = "zfs" -a \
      -e ($device)/@/boot/kernel/kernel -a \
      -e ($device)/@/boot/device.hints; then

      os_found=true

      # If this an exclusive device OS...
      # we know there is not going to be another OS in the same partition
      # so we add it to the osdetect_exclusive_devices variable
      if [ "${exclusive_device_os}" = "TRUE" ] ; then
        osdetect_exclusive_devices="${osdetect_exclusive_devices} ${dev}"
      fi

#       freebsd_zfs_variants $device

    fi

  done

  if [ "$os_found" != true ]; then
    menuentry "${finaloption_tab_str}"$"(Not detected)" {
      sleep 1
    }
  fi

  export osdetect_exclusive_devices

  set root=$saved_root


}
