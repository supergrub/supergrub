# Super Grub Disk - osdetect-linux.cfg
# Copyright (C) 2024 Adrian Gibanel Lopez.
#
# Super Grub Disk is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Super Grub Disk is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Super Grub Disk.  If not, see <http://www.gnu.org/licenses/>.

set option_title=$"Linux"

function linux_entry_add {
  set fstype="$1"
  set device="$2"
  set uuid="$3"
  set kernel="$4"
  set subvol="$5"
  set bootpath="$6"
  set version="$7"
  set kernel_option="$8"

  if test "$kernel_option" = ""; then
    set kernel_option_str=" "
  else
    set kernel_option_str=" (${kernel_option}) "
  fi

  menuentry "${finaloption_tab_str}Linux ${kernel}${kernel_option_str}($device)" "$device" "$uuid" "$kernel" "$version" "$fstype" "$subvol" "$bootpath" "$kernel_option" {
    set root="$2"
    set uuid="$3"
    set kernel="$4"
    set version="$5"
    set fstype="$6"
    set subvol="$7"
    set bootpath="$8"
    set kernel_option="$9"

    linux $kernel root=UUID=$uuid ro ${kernel_option}

    for initrd_file in \
      ${bootpath}/initrd-$version.img \
      ${bootpath}/initrd.img-$version \
      ${bootpath}/initrd-$version \
      ${bootpath}/initramfs-genkernel-$version \
      ${bootpath}/initramfs-$version.img \
    ; do
      if test -f "$initrd_file"; then
        initrd $initrd_file
        break
      fi
    done
  }
}

function linux_btrfs_entry_add {
  set fstype="$1"
  set device="$2"
  set uuid="$3"
  set kernel="$4"
  set subvol="$5"
  set bootpath="$6"
  set version="$7"
  set kernel_option="$8"

  if test "$kernel_option" = ""; then
    set kernel_option_str=" "
  else
    set kernel_option_str=" (${kernel_option}) "
  fi

  menuentry "${finaloption_tab_str}Linux ${kernel}${kernel_option_str}($device)" "$device" "$uuid" "$kernel" "$version" "$fstype" "$subvol" "$bootpath" "$kernel_option" {
    set root="$2"
    set uuid="$3"
    set kernel="$4"
    set version="$5"
    set fstype="$6"
    set subvol="$7"
    set bootpath="$8"
    set kernel_option="$9"

    linux $kernel root=UUID=$uuid ro rootflags=subvol=$subvol ${kernel_option}

    for initrd_file in \
      ${bootpath}/initrd-$version.img \
      ${bootpath}/initrd.img-$version \
      ${bootpath}/initrd-$version \
      ${bootpath}/initramfs-genkernel-$version \
      ${bootpath}/initramfs-$version.img \
    ; do
      if test -f "$initrd_file"; then
        initrd $initrd_file
        break
      fi
    done
  }
}

function run_option {

  source "${sg2d_directory}/tools.cfg"

  if [ "$1" = "osdetect" ] ; then
    run_option_osdetect_mode="TRUE"
  else
    run_option_osdetect_mode="FALSE"
  fi

  if [ "${run_option_osdetect_mode}" = "FALSE" ] ; then
    update_sg2d_devices
    devices_to_loop="${sg2d_devices}"
  else
    update_osdetect_devices
    devices_to_loop="${osdetect_devices}"
  fi

  osdetect_exclusive_devices=""
  exclusive_device_os="FALSE"

  os_found=false

  set saved_root=$root

  for dev in ${devices_to_loop}; do
    getdevice device $dev

    # $fstype: filesystem type identified
    probe -s fstype -f $dev
    # uuid: filesystem UUID
    probe -s uuid -u $dev

    insmod regexp

    for kernel_option in "" "recovery" "single"; do
      # LINUX - Regular filesystems
      for file in ($device)/boot/vmlinuz-* ($device)/boot/linux-* ($device)/boot/kernel-genkernel-*; do
        if test -f $file; then
          os_found=true

          # If this an exclusive device OS...
          # we know there is not going to be another OS in the same partition
          # so we add it to the osdetect_exclusive_devices variable
          if [ "${exclusive_device_os}" = "TRUE" ] ; then
            osdetect_exclusive_devices="${osdetect_exclusive_devices} ${dev}"
          fi
          nkernel_regexp='\('"$device"'\)(((|/@.*)/boot)/(vmlinuz|linux|kernel-genkernel)-(.*))'
          regexp -s 1:kernel_file -s 2:bootpath -s 3:subvol -s 5:version $nkernel_regexp $file
          linux_entry_add "$fstype" "$device" "$uuid" "${kernel_file}" "$subvol" "($device)/boot" "$version" "$kernel_option"
        fi
      done

      # LINUX - BTRFS volumes
      for subvolpath in ($device)/@* ;do
        if test "$fstype" = "btrfs" -a -d $subvolpath ; then
          bootpath="${subvolpath}/boot"
          for file in ${bootpath}/vmlinuz-* ${bootpath}/linux-* ${bootpath}/kernel-genkernel-*; do
            if test -f $file; then
              os_found=true

              # If this an exclusive device OS...
              # we know there is not going to be another OS in the same partition
              # so we add it to the osdetect_exclusive_devices variable
              if [ "${exclusive_device_os}" = "TRUE" ] ; then
                osdetect_exclusive_devices="${osdetect_exclusive_devices} ${dev}"
              fi
              nkernel_regexp='\('"$device"'\)(((|/@.*)/boot)/(vmlinuz|linux|kernel-genkernel)-(.*))'
              regexp -s 1:kernel_file -s 2:bootpath -s 3:subvol -s 5:version $nkernel_regexp $file
              linux_btrfs_entry_add "$fstype" "$device" "$uuid" "${kernel_file}" "$subvol" "$bootpath" "$version" "$kernel_option"
            fi
          done
        fi
      done
    done

    rmmod regexp

  done

  if [ "$os_found" != true ]; then
    menuentry "${finaloption_tab_str}"$"(Not detected)" {
      sleep 1
    }
  fi

  export osdetect_exclusive_devices

  set root=$saved_root


}
