# Super Grub Disk - osdetect-efi.cfg
# Copyright (C) 2024 Adrian Gibanel Lopez.
#
# Super Grub Disk is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Super Grub Disk is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Super Grub Disk.  If not, see <http://www.gnu.org/licenses/>.

set option_title=$"EFI files on EFI partitions"

  function get_efis {
      blockdev="$1"
      blockfs="$2"
      efis=""
      if [ "$blockfs" = "fat" ]; then
          insmod regexp
          for efi in \
           ($blockdev)/efi/*/*.efi \
           ($blockdev)/efi/*/*/*.efi \
           ($blockdev)/*.efi \
           ($blockdev)/*/*.efi \
           ($blockdev)/EFI/*/*.EFI \
           ($blockdev)/EFI/*/*/*.EFI \
           ($blockdev)/*.EFI \
           ($blockdev)/*/*.EFI \
           ($blockdev)/EFI/*/*.efi \
           ($blockdev)/EFI/*/*/*.efi \
           ($blockdev)/efi/*/*.EFI \
           ($blockdev)/efi/*/*/*.EFI \
           ; do
              if [ -f "$efi" ] ; then
                  efis="$efis $efi"
              fi
          done
          rmmod regexp
          if [ -n "$efis" ]; then
              return 0
          fi
      fi
      return 1
  }

function run_option {

  source "${sg2d_directory}/tools.cfg"

  if [ "$1" = "osdetect" ] ; then
    run_option_osdetect_mode="TRUE"
  else
    run_option_osdetect_mode="FALSE"
  fi

  if [ "${run_option_osdetect_mode}" = "FALSE" ] ; then
    update_sg2d_devices
    devices_to_loop="${sg2d_devices}"
  else
    update_osdetect_devices
    devices_to_loop="${osdetect_devices}"
  fi

  osdetect_exclusive_devices=""
  exclusive_device_os="FALSE"

  os_found=false

  set saved_root=$root

  for dev in ${devices_to_loop}; do
    getdevice device $dev

    # $fstype: filesystem type identified
    probe -s fstype -f $dev
    # uuid: filesystem UUID
    probe -s uuid -u $dev

    get_efis $device $fstype
    flagplatform efi
    for efi in $efis; do

        os_found=true

        # If this an exclusive device OS...
        # we know there is not going to be another OS in the same partition
        # so we add it to the osdetect_exclusive_devices variable
        if [ "${exclusive_device_os}" = "TRUE" ] ; then
          osdetect_exclusive_devices="${osdetect_exclusive_devices} ${dev}"
        fi

        menuentry "${finaloption_tab_str}${sgdflagplat}${efi} ($device)" "$efi" "$device" {
            efi_device="$3"
            efi="$2"
            if withplatform efi; then
                root="$efi_device"
                chainloader "$efi"
            fi
        }
    done

  done

  if [ "$os_found" != true ]; then
    menuentry "${finaloption_tab_str}"$"(Not detected)" {
      sleep 1
    }
  fi

  export osdetect_exclusive_devices

  set root=$saved_root


}
